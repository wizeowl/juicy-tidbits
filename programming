http://allendowney.blogspot.com/2018/02/learning-to-program-is-getting-harder.html
https://en.wikipedia.org/wiki/Shibboleth
http://smorgasborg.artlung.com/Invention_of_Cplusplus.shtml
Cialdini: Consistency
Zappos: Hiring
Leon Festinger: Cognitive Dissonance

Yesterday, I have read Allen Downey's excellent article "Learning to program is getting harder"
First one word about the blog title: "Probably Overthinking it" Cool name, Could have been mine's (refering to the blog's article could be my blog's, whao! (you just earned a whao point!))
For those who didn't read the article, its main idea is that, let's say 30 years ago, your computer's main purpose was programming
today if you need to start programming you have to setup editors, libraries, binaries first.
this acts as a barrier to entry

the aim of my article is first to discuss if it may be a good thing that programming is becoming a hard thing
to ask the question: is really so

the problem is that I have no way to tell how hard it is to get starting to program
I'm already an experienced programmer, I lost my virginity
(though I have the intention to teach somebody to program but that's another story)

It may be true that learning how ot program is becoming harder today.
As a experimented programmer, it might need real sympathy to recognize that learning our trade today is more tricky than ever.
It's hard for us to recognize it because we already can sift through the deluge of information innundating us from every side.
We can distinguish the good from the bad, the relevant from the outdated.
Programming languages are getting really numerous, each with its own communities, resources, articles, tutorials, videos, youtube videos, books, etc.
Many of which need real expertise to know it's fluff
Many buzz words
I remember how I felt when I have first read this article.
People like Brian Stroustrup are may be responsible for this
He said it tongue in cheek, he saw a bunch of trends, 
programmers were getting numerous, wages were dropping, programmmers were getting really good at programming
skills were really protable
what to do about it, use the Object oriented programming bandwagon and invent a disruptive (litterally) programming language
market it as the end all and be all of programming
create a new problem for which you're(kind of) providing the solution
voila now you have scala, java, php, javascript, elixir, haskell, c++ .... good luck making your way through that

Let's talk about cognitive dissonnance. Leon Festinger, at Stanford at the time, devised a bunch of experiments to establish the phenomenon of
cognitive dissonance.
It states that inconsitencies in the brain are very unconftable and are resolved unconsciously by the brain. the tension musrt be resolved.

Some call it the zappos tactic. 
Zappos used to have a final step in their hiring process. They propose a sum of money to the candidate and tell them they can either take the money
and leave or work for their company.
Once one makes the decision and sticks with joining the company he basically tells himself the following everyday when they wake up:
I gave up 1000$ for this job, I must really love it.

The consitency principle is a very strong motivator and influencer of human behavior.
Bob Cialdini states it as one of the strongest influencer of human behavior in his book Influence.

Sunk costs

Now let's get back to our topic.
Is it good or bad for learning to program to be hard. My opinion: it's a good thing.
Once you sweat and toil for something you grow really attached to it. It's called sunk cost.
The consitency princliple kicks in. If gets you more and more commited to it.
It becomes a riteof passage, now you're a programmer.
What happens when everything is easy? You get the wrong idea about and also you think you're a programmer withoutmaking the necessary effort
We don't need spoiled programmers

My final point is that you still don't have a conclusive idea about how prevalent the problem is
Lost innocence
You no longer have the fresh eyes to tell if it's hard or easy, it's impossible to unlearn how to read, that's why the stroop test is such a sone of a bitch
the only way to know it is to see how many people read the article, h√ßow many tried to implement, how many found it hard, easy then make conclusion
you need some statistics, some objective assessment of how hard running the code really was
don't forget about windows, real men use linux

finally it's maybe not need to install python to understand the ideas
even experienced programmers find it hard to find the strenth and will power to download and get their env right at the end of a long day
that's why we need such things as Jupyter
