http://allendowney.blogspot.com/2018/02/learning-to-program-is-getting-harder.html
https://en.wikipedia.org/wiki/Shibboleth
http://smorgasborg.artlung.com/Invention_of_Cplusplus.shtml
Cialdini: Consistency
Zappos: Hiring
Leon Festinger: Cognitive Dissonance

Yesterday, I have read Allen Downey's article "Learning to program is getting harder"
(First, an aside about the blog title: "Probably Overthinking it". It could have been my blog's title :)
The main idea of the article is that today if you need to start programming you have to setup editors, libraries, binaries, etc.
This constitutes a barrier which distracts from the main purpose, be it learning subjects data analysis, signal processing, or programming itself.
He argued that, let's say 30 years ago, a computer came bundled with a development environement and you didn't have to be hassled by installation and configurations.

My article is intended to discuss two points.
First, is it true that programming is getting harder today?
Scond, Could it be a good thing?

I remember how I felt when I have first read this article.
People like Brian Stroustrup are may be responsible for this
He said it tongue in cheek, he saw a bunch of trends, 
programmers were getting numerous, wages were dropping, programmmers were getting really good at programming
skills were really protable
what to do about it, use the Object oriented programming bandwagon and invent a disruptive (litterally) programming language
market it as the end all and be all of programming
create a new problem for which you're(kind of) providing the solution
voila now you have scala, java, php, javascript, elixir, haskell, c++ .... good luck making your way through that

Let's talk about cognitive dissonnance. Leon Festinger, at Stanford at the time, devised a bunch of experiments to establish the phenomenon of
cognitive dissonance.
It states that inconsitencies in the brain are very unconftable and are resolved unconsciously by the brain. the tension musrt be resolved.

Some call it the zappos tactic. 
Zappos used to have a final step in their hiring process. They propose a sum of money to the candidate and tell them they can either take the money
and leave or work for their company.
Once one makes the decision and sticks with joining the company he basically tells himself the following everyday when they wake up:
I gave up 1000$ for this job, I must really love it.

The consitency principle is a very strong motivator and influencer of human behavior.
Bob Cialdini states it as one of the strongest influencer of human behavior in his book Influence.

Sunk costs

Now let's get back to our topic.
Is it good or bad for learning to program to be hard. My opinion: it's a good thing.
Once you sweat and toil for something you grow really attached to it. It's called sunk cost.
The consitency princliple kicks in. If gets you more and more commited to it.
It becomes a riteof passage, now you're a programmer.
What happens when everything is easy? You get the wrong idea about and also you think you're a programmer withoutmaking the necessary effort
We don't need spoiled programmers


finally it's maybe not need to install python to understand the ideas
even experienced programmers find it hard to find the strenth and will power to download and get their env right at the end of a long day
that's why we need such things as Jupyter
