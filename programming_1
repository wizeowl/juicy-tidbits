Yesterday, I've read Allen Downey's article "Learning to program is getting harder"
(First, an aside about the blog title: "Probably Overthinking it". It could have been my blog's title :)
The main idea of the article is that today if you need to start programming you have to setup editors, libraries, binaries, etc.
This constitutes a barrier which distracts from the main purpose, be it learning subjects data analysis, signal processing, or programming itself.
He argued that, let's say 30 years ago, a computer came bundled with a development environement and you didn't have to be hassled by installation and configurations.
He also remarked that beginners are finding it harder to run the examples he provided with his books.

My first impression when reading Allan's article was scepticism. Based on a few complaints by people who couldn't run examples on their machines, one can't conclude that beginning to program is getting harder. You need more data about the people who tried, those who succeded, and those who didn't. Sloppiness must follow a normal distribution.
I actually firmly believed that the opposite was true. Today You can google anything, right?

I smiled, because only one day earlier, I was lamenting how we're teaching children everything the wrong way. From reading and writing to math, taking the categories, rules and heuristics we develop to formalize a subject, and trying to impose them on students. We pretend that's the way we learned those subjects, but in reality, we have no idea how we made our first steps and developed our mental models in the first place. It's impossible to unlearn how to program, just like it's impossible to unlearn how to read (that's why that stroop test is such a bummer). Therefore it's impossible for us to put ourselves in the shoes of absolute beginners. But we pretend that we learned effortlessly and we saw it all along exactly the way we currently do. It's a variant of generational conflict which reminds me of a George Orwell quote I really love "Every generation imagines itself to be more intelligent than the one that went before it, and wiser than the one that comes after it."

Today there are numerous programming languages, each with their own articles, tutorials, youtube videos, books, advocates, cults, buzzword, buzzwords, buzzwords, and shriek, frameworks! Of course we can google anything, but there are many things which happen when I (for example) look for information. It makes a difference how I write my questions, which google results look relevant, what to skip and what to read in a long forum thread, is the solution I'm looking at plausible and applicable, etc.

Here's a brief digression, and, let's hope, a useful one. My favorite badass is Brian Stroustrup (He's the inventor of C++ by the way). When I've read this article I thought it was a joke. What he said was basically that programmers were getting numerous and more proficient that wages started to stagnate. So jumped on the OOP bandwagon and introduced a "revolutionary" object oriented programming language called C++. Let's give him credit for his noble intentions, but let's not overlook that the Internet, modern operating systems, and browsers came along, introducing new constraints and requirements. That's how languages like Java and Javascripts were born (we're sadly still stuck with Java)
